import React, { Component } from 'react';
import PropTypes from 'prop-types';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "/* add css styles here (optional) */\n\n.styles_nav_pagination__3Lo0d {\n    display: inline-block;\n}\n\n.styles_nav_pagination__3Lo0d > ul {\n    list-style: none;\n    padding: 0 15px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n}\n\n.styles_nav_pagination__3Lo0d > ul > li {\n    padding: 0 5px;\n}\n\n.styles_nav_pagination__3Lo0d > ul > li > a {\n    text-decoration: none;\n    color: inherit;\n}";
var styles = { "nav_pagination": "styles_nav_pagination__3Lo0d" };
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Pagination = function (_Component) {
    inherits(Pagination, _Component);

    function Pagination(props) {
        classCallCheck(this, Pagination);

        var _this = possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

        _this.state = {
            renderPageNumbers: ''
        };
        return _this;
    }

    createClass(Pagination, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.buildPages();
        }
    }, {
        key: 'prev',
        value: function prev(e) {
            var page = this.props.options.current > 1 ? this.props.options.current - 1 : 1;
            this.toPage(e, page);
        }
    }, {
        key: 'next',
        value: function next(e) {
            var page = this.props.options.current + 1;
            this.toPage(e, page);
        }
    }, {
        key: 'toPage',
        value: function toPage(e, page) {
            e.preventDefault();
            if (page !== this.props.options.current && !(page > this.props.options.last || page < 1)) {
                this.props.onClick(page);
                this.props.options.current = page;

                this.buildPages();
            }
        }
    }, {
        key: 'buildPages',
        value: function buildPages() {
            var _this2 = this;

            var pageNumbers = [];
            var renderPageNumbers = void 0;

            var _props = this.props,
                pageRangeDisplayed = _props.pageRangeDisplayed,
                itemClass = _props.itemClass,
                linkClass = _props.linkClass,
                activeClass = _props.activeClass,
                disabledClass = _props.disabledClass;


            if (this.props.options.total > 0) {

                for (var i = 1; i <= Math.ceil(this.props.options.total / this.props.options.perPage); i++) {
                    pageNumbers.push(i);
                }

                renderPageNumbers = pageNumbers.filter(function (number) {
                    return number == 1 && number >= _this2.props.options.current - pageRangeDisplayed || number == _this2.props.options.total || number >= _this2.props.options.current - pageRangeDisplayed && number <= _this2.props.options.current + pageRangeDisplayed;
                }).map(function (number) {
                    var _cx;

                    var classes = classnames(itemClass, (_cx = {}, defineProperty(_cx, activeClass, _this2.props.options.current === number), defineProperty(_cx, disabledClass, false), _cx));
                    return React.createElement(
                        'li',
                        { key: number, className: classes },
                        React.createElement(
                            'a',
                            { className: linkClass, href: '#', onClick: function onClick(e) {
                                    return _this2.toPage(e, number);
                                }, 'aria-label': 'Go to page number ' + number },
                            number
                        )
                    );
                });
            }

            this.setState({ renderPageNumbers: renderPageNumbers });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var renderPageNumbers = this.state.renderPageNumbers;
            var _props2 = this.props,
                innerClass = _props2.innerClass,
                itemClass = _props2.itemClass,
                linkClass = _props2.linkClass,
                disabledClass = _props2.disabledClass;


            return React.createElement(
                'nav',
                { className: styles.nav_pagination },
                React.createElement(
                    'ul',
                    { className: innerClass },
                    React.createElement(
                        'li',
                        { className: classnames(itemClass, defineProperty({}, disabledClass, this.props.options.current == 1))
                        },
                        React.createElement(
                            'a',
                            { className: linkClass, href: '#', onClick: function onClick(e) {
                                    return _this3.toPage(e, 1);
                                } },
                            this.props.firstPageText
                        )
                    ),
                    React.createElement(
                        'li',
                        { className: classnames(itemClass, defineProperty({}, disabledClass, this.props.options.current === 1))
                        },
                        React.createElement(
                            'a',
                            { className: linkClass, href: '#', onClick: function onClick(e) {
                                    return _this3.prev(e);
                                } },
                            this.props.prevPageText
                        )
                    ),
                    renderPageNumbers,
                    React.createElement(
                        'li',
                        { className: classnames(itemClass, defineProperty({}, disabledClass, this.props.options.current === this.props.options.last))
                        },
                        React.createElement(
                            'a',
                            { className: linkClass, href: '#', onClick: function onClick(e) {
                                    return _this3.next(e);
                                } },
                            this.props.nextPageText
                        )
                    ),
                    React.createElement(
                        'li',
                        { className: classnames(itemClass, defineProperty({}, disabledClass, this.props.options.last == this.props.options.current))
                        },
                        React.createElement(
                            'a',
                            { className: linkClass, href: '#', onClick: function onClick(e) {
                                    return _this3.toPage(e, _this3.props.options.last);
                                } },
                            this.props.lastPageText
                        )
                    )
                )
            );
        }
    }]);
    return Pagination;
}(Component);

Pagination.propTypes = {
    onClick: PropTypes.func.isRequired,
    options: PropTypes.object.isRequired,
    pageRangeDisplayed: PropTypes.number,
    prevPageText: PropTypes.string,
    firstPageText: PropTypes.string,
    nextPageText: PropTypes.string,
    lastPageText: PropTypes.string,
    innerClass: PropTypes.string,
    itemClass: PropTypes.string,
    linkClass: PropTypes.string,
    activeClass: PropTypes.string,
    disabledClass: PropTypes.string
};
Pagination.defaultProps = {
    pageRangeDisplayed: 3,
    prevPageText: "⟨",
    firstPageText: "«",
    nextPageText: "⟩",
    lastPageText: "»",
    innerClass: "pagination",
    itemClass: undefined,
    linkClass: undefined,
    activeClass: "active",
    disabledClass: "disabled"
};

export default Pagination;
//# sourceMappingURL=index.es.js.map

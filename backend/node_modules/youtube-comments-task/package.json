{
  "_from": "youtube-comments-task",
  "_id": "youtube-comments-task@1.3.14",
  "_inBundle": false,
  "_integrity": "sha512-QYhE3+tIoTL1lb7i5ocAQct5EMWm0B2RH1mVJUKu9qfDVjzymdFX4kVUM1g5DbxTNwgFSlsUTiQvvEnIuM8T3A==",
  "_location": "/youtube-comments-task",
  "_phantomChildren": {
    "css-select": "1.2.0",
    "dom-serializer": "0.1.1",
    "entities": "1.1.2",
    "htmlparser2": "3.10.1",
    "lodash.assignin": "4.2.0",
    "lodash.bind": "4.2.1",
    "lodash.defaults": "4.2.0",
    "lodash.filter": "4.6.0",
    "lodash.flatten": "4.4.0",
    "lodash.foreach": "4.5.0",
    "lodash.map": "4.6.0",
    "lodash.merge": "4.6.2",
    "lodash.pick": "4.4.0",
    "lodash.reduce": "4.6.0",
    "lodash.reject": "4.6.0",
    "lodash.some": "4.6.0"
  },
  "_requested": {
    "escapedName": "youtube-comments-task",
    "fetchSpec": "latest",
    "name": "youtube-comments-task",
    "raw": "youtube-comments-task",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/youtube-comments-task/-/youtube-comments-task-1.3.14.tgz",
  "_shasum": "21e71d3c1ea36b2d60a0a00c6c62d8e47049db00",
  "_spec": "youtube-comments-task",
  "_where": "/Users/chirab/Desktop/delivery/DEV_dashboard_2019/backend",
  "author": {
    "email": "philip.klostermann@gmail.com",
    "name": "Philip Klostermann"
  },
  "bugs": {
    "url": "https://github.com/philbot9/youtube-comments-task/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "cheerio": "^0.22.0",
    "control.monads": "^0.6.0",
    "core.lambda": "^1.0.0",
    "data.either": "^1.4.0",
    "data.task": "^3.1.1",
    "debug": "^2.2.0",
    "moment": "^2.21.0",
    "propper": "^1.0.2",
    "ramda": "^0.23.0",
    "request": "^2.88.0",
    "request-promise": "^4.2.2",
    "retry-task": "^1.0.1"
  },
  "deprecated": false,
  "description": "Scrape comments from YouTube Videos.",
  "devDependencies": {
    "babel-cli": "^6.23.0",
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-env": "^1.7.0",
    "chai": "^4.2.0",
    "mocha": "^5.2.0",
    "nyc": "^13.1.0",
    "prettier-standard": "^8.0.1",
    "standard": "^8.6.0",
    "standard-format": "^2.2.4",
    "testdouble": "^3.8.2"
  },
  "homepage": "https://github.com/philbot9/youtube-comments-task#readme",
  "keywords": [
    "comment",
    "functional",
    "scraper",
    "task",
    "youtube"
  ],
  "license": "ISC",
  "main": "./dist/index.js",
  "name": "youtube-comments-task",
  "optionalDependencies": {},
  "readme": "# youtube-comments-task\n\nScrape comments, including their replies, from a YouTube video.\n\n[![Build Status](https://travis-ci.org/philbot9/youtube-comments-task.svg?branch=master)](https://travis-ci.org/philbot9/youtube-comments-task)\n\n\n## Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Comment Data](#comment-data)\n* [Errors](#errors)\n* [Task](#task)\n* [Compatibility](#compatibility)\n* [Examples](#examples)\n\n## Installation\n\n``` bash\nnpm install --save youtube-comments-task\n```\n\n## Usage\n\nThe module exports a single function:\n\n`fetchComments(videoId[,pageToken])`\n\nThe function accepts the YouTube `videoId` and an optional `pageToken`, and returns a [**Task**](#task) that resolves to the corresponding page of comments. If the `pageToken` is not provided it fetches the first page of comments.\n\nThe result is an object with the following properties.\n\n``` javascript\n{\n  comments: [ { comment }, { comment }, ... ],\n  nextPageToken: 'nextpagetokenhere'\n}\n```\n\n**Note:** If the fetched page is the last page, the result does not contain the `nextPageToken` property.\n\n## Comment Data\n\n```\n{\n  id: {{ comment id}},\n  author: {{ comment author name }},\n  authorLink: {{ comment author link (channel) }},\n  authorThumb: {{ comment author avatar thumb url }},\n  text: {{ comment text }},\n  likes: {{ comment up-votes }},\n  time: {{ how long ago the comment was posted (relative, e.g. '1 year ago') }},\n  timestamp: {{ timestamp when comment was posted in milliseconds (absolute, e.g. 1457661439642 }},\n  edited: {{ whether the comment was edited by the authro (true/false) }},\n  hasReplies: {{ whether the comment has replies (true/fasle) }},\n  repliesToken: {{ token used to fetch replies for the comment }},\n  numReplies: {{ number of replies }},\n  replies: [ {{ reply objects (same fields as comments) }} ]\n}\n```\n\n## Errors\n\nErrors are as descriptive and (hopefully) useful as possible. Private, deleted, and unavailable videos are detected, and an appropriate error type is assigned. Error types are defined in [/src/lib/error-types.js](/src/lib/error-types.js).\n\nA typical error object has the following fields.\n\n```\n{\n  type: {{ error type }},\n  message: {{ error message }},\n  videoId: {{ YouTube video id }},\n  component: {{ module component }},\n  operation: {{ operation that failed }}\n}\n```\n\n## Task\n\nThe module uses [Folktale's Task monad](http://docs.folktalejs.org/en/latest/api/data/task/) ([data.task](https://github.com/folktale/data.task)) to handle asynchronicity and to allow for easy composition.\n\nIf you'd rather use **Promises** instead of Tasks, check out [youtube-comment-api](https://github.com/philbot9/youtube-comment-api).\n\n## Compatibility\n\nThe module is transpiled with **Babel** and is compatible with node.js versions **>= 6**.\n\n## Examples\n\n``` javascript\nconst fetchComments = require('youtube-comments-task')\n\nfetchComments('h_tkIpwbsxY')\n  .fork(e => console.error('ERROR', e),\n        p => {\n          console.log('comments', p.comments)\n          console.log('nextPageToken', p.nextPageToken)\n        })\n```\n\n``` javascript\nconst Task = require('data.task')\nconst fetchComments = require('youtube-comments-task')\n\nconst fetchAllComments = (videoId, pageToken, fetched = []) =>\n  fetchComments(videoId, pageToken)\n    .chain(({ comments, nextPageToken }) =>\n      nextPageToken\n        ? fetchAllComments(videoId, nextPageToken, fetched.concat(comments))\n        : Task.of(fetched.concat(comments)))\n\nfetchAllComments('h_tkIpwbsxY')\n  .fork(e => console.error('ERROR', e),\n        allComments => console.log(allComments))\n\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/philbot9/youtube-comments-task.git"
  },
  "scripts": {
    "build": "babel src -d dist",
    "coverage": "nyc --reporter=html mocha 'src/test/**/*.js'",
    "format": "prettier-standard './src/**/*.js'",
    "integration-test": "mocha dist/test/integration-tests/*.js",
    "prepublish": "npm run build",
    "test": "npm run build && npm run unit-test && npm run integration-test",
    "unit-test": "mocha 'dist/test/*.js' 'dist/test/lib/**/*.js'",
    "unit-test:src": "mocha 'src/test/*.js' 'src/test/lib/**/*.js'"
  },
  "version": "1.3.14"
}
